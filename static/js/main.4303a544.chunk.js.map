{"version":3,"sources":["components/Form.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","type","value","inputText","className","onChange","e","setInputText","target","onClick","preventDefault","setTodos","todos","text","completed","id","Math","random","toFixed","setStatus","name","Todo","displayTodo","updatedTodos","map","el","remainingTodo","filter","TodoList","filteredTodos","t","idx","key","App","useState","status","setfilteredTodos","useEffect","console","log","getLocalStore","filteredHandler","setLocalStore","completedList","unCompletedList","localStorage","setItem","JSON","stringify","getTodos","parse","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4303a544.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Form(props) {\n    // console.log(props)\n\n    const inputTextHandler = (e) => {\n        //call the function in App.js\n        // console.log(e.target.value)\n        props.setInputText(e.target.value)\n    }\n\n    const inputTextSubmit = (e) => {\n        //call the function in App.js & pass value\n        e.preventDefault()\n        props.setTodos([...props.todos, {text: props.inputText, completed: false, id: (Math.random()*1000).toFixed(0)}\n        ]);\n        props.setInputText(\"\");\n    }\n\n    const selectionHandler = (e) => {\n        // console.log(e.target.value)\n        props.setStatus(e.target.value)\n    }\n\n    return (\n\n            <form>\n                <input type=\"text\" value={props.inputText} className=\"todo-input\" onChange={inputTextHandler}/>\n                    <button type=\"submit\" className=\"todo-button\"  onClick={inputTextSubmit} >\n                    <i className=\"fas fa-plus-square\"></i>\n                </button>\n                <div className=\"select\">\n                    <select onChange={selectionHandler} name=\"todos\" className=\"filter-todo\">\n                        <option value=\"all\">All</option>\n                        <option value=\"completed\">Completed</option>\n                        <option value=\"uncompleted\">Uncompleted</option>\n\n                    </select>\n                </div>\n        \n            </form>\n        \n    )\n}\n\nexport default Form\n","import React from 'react'\n\nfunction Todo(props) {\n    // console.log(props)\n    const isCompleted = () => {\n        \n        let updatedTodos = props.todos.map(el => {\n            if(el.id === props.displayTodo.id){\n                el.completed = !el.completed\n            }\n            return el\n        })\n\n        // console.log(updatedTodos)\n        props.setTodos(updatedTodos)\n\n    }\n\n    const deleteHandler = () => {\n        let remainingTodo = props.todos.filter(el => el.id !== props.displayTodo.id)\n\n        props.setTodos(remainingTodo)\n    }\n\n        //destructure displayTodo\n        const {displayTodo} = props\n    \n    return (\n        \n        <div>\n            <div className=\"todo\">\n\n                <li className={`todo-item ${displayTodo.completed? \"completed\" : \"\" }`}>\n                    {displayTodo.text}\n                </li>\n                <button className= \"complete-btn\" onClick={isCompleted}>\n                    <i className=\"fas fa-check\" ></i>\n                </button>\n                <button className=\"trash-btn\" onClick={deleteHandler}>\n                    <i className=\"fas fa-trash\"></i>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todo\n","import React from 'react'\nimport Todo from './Todo'\n\nfunction TodoList(props) {\n    // console.log(props)\n    return (\n        <div>\n            <div className=\"todo-container\">\n                <ul className=\"todo-list\">\n                    {props.filteredTodos.map((t,idx) => \n                        <Todo displayTodo={t} todos={props.todos} setTodos={props.setTodos} key={idx}/>\n                    )}\n                    \n                </ul>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default TodoList\n","import React, {useState, useEffect} from 'react';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList'\nimport './App.css';\n\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\")\n  const [todos, setTodos] = useState([])\n  const [status, setStatus] = useState('all')\n  const [filteredTodos, setfilteredTodos] = useState([])\n  \n  // console.log(status)\n\n  useEffect(()=> {\n    console.log('test useEffect')\n    // return () => {\n    //   console.log('unmounted')\n    // }\n  })\n\n  //render, set smth into state. will cause rerender but second arg [] stop it from running however will cause the above UE to run once (due to rerender)\n  useEffect(()=> {\n    getLocalStore()\n    console.log('get LS', todos)\n  },[])\n\n    //render, set smth into state. will cause rerender but second arg [x,y] stop it from running until next update however will cause the 1st UE to run once (due to rerender)\n  useEffect(() => {\n    filteredHandler()\n    setLocalStore()\n    console.log('todos', todos)\n    console.log('status', todos)\n  },[todos, status])\n\n  const filteredHandler = () => {\n    let completedList = todos.filter(el => el.completed === true) \n    let unCompletedList = todos.filter(el => el.completed === false)\n    \n    switch(status){\n      case 'completed':\n        setfilteredTodos(completedList)\n        break;\n      case 'uncompleted':\n        setfilteredTodos(unCompletedList)\n        break;\n      default:\n        setfilteredTodos(todos)\n    }\n  }\n\n  const setLocalStore = () => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }\n\n  const getLocalStore = () => {\n    let getTodos = JSON.parse(localStorage.getItem('todos'))\n    setTodos(getTodos)\n    // console.log(getTodos)\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <header>Andi's React Todo</header>\n        <Form setInputText={setInputText} inputText={inputText} todos={todos} setTodos={setTodos} setStatus={setStatus}/>\n        <TodoList todos={todos} setTodos={setTodos} filteredTodos={filteredTodos}/>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}